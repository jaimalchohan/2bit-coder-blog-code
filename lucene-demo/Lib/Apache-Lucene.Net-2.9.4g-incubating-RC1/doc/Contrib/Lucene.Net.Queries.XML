<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Lucene.Net.Queries</name>
    </assembly>
    <members>
        <member name="F:Lucene.Net.Search.BooleanFilter.shouldFilters">
            <summary>
            The filters that are optional clauses.
            </summary>
        </member>
        <member name="F:Lucene.Net.Search.BooleanFilter.notFilters">
            <summary>
            The filters that are used for exclusion.
            </summary>
        </member>
        <member name="F:Lucene.Net.Search.BooleanFilter.mustFilters">
            <summary>
            The filters that must be met.
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilter.GetDISI(System.Collections.Generic.List{Lucene.Net.Search.Filter},System.Int32,Lucene.Net.Index.IndexReader)">
            <summary>
            Get the iterator for a specific filter.
            </summary>
            <param name="filters">The list of filters</param>
            <param name="index">The index of the iterator to get.</param>
            <param name="reader">The reader for the index.</param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilter.GetDocIdSet(Lucene.Net.Index.IndexReader)">
            <summary>
            Get the id set for the filter.
            </summary>
            <param name="reader">The reader.</param>
            <returns>The filter set to use.</returns>
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilter.Add(Lucene.Net.Search.BooleanFilterClause)">
            <summary>
            Add a filter clause.
            </summary>
            <param name="filterClause">The clause to add.</param>
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilter.FinalResult(Lucene.Net.Util.OpenBitSetDISI,System.Int32)">
            Provide a SortedVIntList when it is definitely smaller
            than an OpenBitSet.
            @deprecated Either use CachingWrapperFilter, or
            switch to a different DocIdSet implementation yourself. 
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilter.EqualFilters(System.Collections.Generic.List{Lucene.Net.Search.Filter},System.Collections.Generic.List{Lucene.Net.Search.Filter})">
            <summary>
            Determine equality between two lists.
            </summary>
            <param name="filters1"></param>
            <param name="filters2"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilter.Equals(System.Object)">
            <summary>
            Equality
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilter.GetHashCode">
            <summary>
            Hash code.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilter.ToString">
            <summary>
            String representation.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilter.AppendFilters(System.Collections.Generic.List{Lucene.Net.Search.Filter},System.String,System.Text.StringBuilder)">
            <summary>
            Append individual filters.
            </summary>
            <param name="filters"></param>
            <param name="occurString"></param>
            <param name="buffer"></param>
        </member>
        <member name="T:Lucene.Net.Search.BooleanFilterClause">
            <summary>
            A spefic clause that makes up a part of the BooleanFilter
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.BooleanFilterClause.#ctor(Lucene.Net.Search.Filter,Lucene.Net.Search.BooleanClause.Occur)">
            <summary>
            Create a new BooleanFilterClause
            </summary>
            <param name="filter">A Filter object</param>
            <param name="occur">A parameter implementation indicating SHOULD, MUST or MUST NOT</param>
        </member>
        <member name="P:Lucene.Net.Search.BooleanFilterClause.Filter">
            <summary>
            The underlying filter for the clause.
            </summary>
        </member>
        <member name="P:Lucene.Net.Search.BooleanFilterClause.Occur">
            <summary>
            The occurrence of this clause.
            </summary>
        </member>
        <member name="F:Lucene.Net.Search.DuplicateFilter.keepMode">
            KeepMode determines which document id to consider as the master, all others being 
            identified as duplicates. Selecting the "first occurrence" can potentially save on IO.
        </member>
        <member name="F:Lucene.Net.Search.DuplicateFilter.processingMode">
                     * "Full" processing mode starts by setting all bits to false and only setting bits
                     * for documents that contain the given field and are identified as none-duplicates. 
            
                     * "Fast" processing sets all bits to true then unsets all duplicate docs found for the
                     * given field. This approach avoids the need to read TermDocs for terms that are seen 
                     * to have a document frequency of exactly "1" (i.e. no duplicates). While a potentially 
                     * faster approach , the downside is that bitsets produced will include bits set for 
                     * documents that do not actually contain the field given.
                     * 
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lucene.Net.Search.BoostingQuery" -->
        <member name="T:Lucene.Net.Search.Similar.MoreLikeThisQuery">
            A simple wrapper for MoreLikeThis for use in scenarios where a Query object is required eg
            in custom QueryParser extensions. At query.rewrite() time the reader is used to construct the
            actual MoreLikeThis object and obtain the real Query object.
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThisQuery.#ctor(System.String,System.String[],Lucene.Net.Analysis.Analyzer)">
            @param moreLikeFields
        </member>
        <!-- Badly formed XML comment ignored for member "T:Lucene.Net.Search.Similar.MoreLikeThis" -->
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_NUM_TOKENS_PARSED">
            <summary> Default maximum number of tokens to parse in each example doc field that is not stored with TermVector support.</summary>
            <seealso cref="!:#getMaxNumTokensParsed">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MIN_TERM_FREQ">
            <summary> Ignore terms with less than this frequency in the source doc.</summary>
            <seealso cref="!:#getMinTermFreq">
            </seealso>
            <seealso cref="!:#setMinTermFreq">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFALT_MIN_DOC_FREQ">
            <summary> Ignore words which do not occur in at least this many docs.</summary>
            <seealso cref="!:#getMinDocFreq">
            </seealso>
            <seealso cref="!:#setMinDocFreq">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_BOOST">
            <summary> Boost terms in query based on score.</summary>
            <seealso cref="!:#isBoost">
            </seealso>
            <seealso cref="!:#SetBoost">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MIN_WORD_LENGTH">
            <summary> Ignore words less than this length or if 0 then this has no effect.</summary>
            <seealso cref="!:#getMinWordLen">
            </seealso>
            <seealso cref="!:#setMinWordLen">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_WORD_LENGTH">
            <summary> Ignore words greater than this length or if 0 then this has no effect.</summary>
            <seealso cref="!:#getMaxWordLen">
            </seealso>
            <seealso cref="!:#setMaxWordLen">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_MAX_QUERY_TERMS">
            <summary> Return a Query with no more than this many terms.
            
            </summary>
            <seealso cref="!:BooleanQuery#getMaxClauseCount">
            </seealso>
            <seealso cref="!:#getMaxQueryTerms">
            </seealso>
            <seealso cref="!:#setMaxQueryTerms">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_ANALYZER">
            <summary> Default analyzer to parse source doc with.</summary>
            <seealso cref="!:#getAnalyzer">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_FIELD_NAMES">
            <summary> Default field names. Null is used to specify that the field names should be looked
            up at runtime from the provided reader.
            </summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.DEFAULT_STOP_WORDS">
            <summary> Default set of stopwords.
            If null means to allow stop words.
            
            </summary>
            <seealso cref="!:#setStopWords">
            </seealso>
            <seealso cref="!:#getStopWords">
            </seealso>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.stopWords">
            <summary> Current set of stop words.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.analyzer">
            <summary> Analyzer that will be used to parse the doc.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.minTermFreq">
            <summary> Ignore words less freqent that this.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.minDocFreq">
            <summary> Ignore words which do not occur in at least this many docs.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.boost">
            <summary> Should we apply a boost to the Query based on the scores?</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.fieldNames">
            <summary> Field name we'll analyze.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.maxNumTokensParsed">
            <summary> The maximum number of tokens to parse in each example doc field that is not stored with TermVector support</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.minWordLen">
            <summary> Ignore words if less than this len.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.maxWordLen">
            <summary> Ignore words if greater than this len.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.maxQueryTerms">
            <summary> Don't return a query longer than this.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.similarity">
            <summary> For idf() calculations.</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.ir">
            <summary> IndexReader to use</summary>
        </member>
        <member name="F:Lucene.Net.Search.Similar.MoreLikeThis.boostFactor">
            <summary> Boost factor to use when boosting the terms </summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetBoostFactor">
            <summary>
            Returns the boost factor used when boosting terms
            </summary>
            <returns>Returns the boost factor used when boosting terms</returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetBoostFactor(System.Single)">
            <summary>
            Sets the boost factor to use when boosting terms
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.#ctor(Lucene.Net.Index.IndexReader)">
            <summary> Constructor requiring an IndexReader.</summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetAnalyzer">
            <summary> Returns an analyzer that will be used to parse source doc with. The default analyzer
            is the {@link #DEFAULT_ANALYZER}.
            
            </summary>
            <returns> the analyzer that will be used to parse source doc with.
            </returns>
            <seealso cref="!:#DEFAULT_ANALYZER">
            </seealso>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetAnalyzer(Lucene.Net.Analysis.Analyzer)">
            <summary> Sets the analyzer to use. An analyzer is not required for generating a query with the
            {@link #Like(int)} method, all other 'like' methods require an analyzer.
            
            </summary>
            <param name="analyzer">the analyzer to use to tokenize text.
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetMinTermFreq">
            <summary> Returns the frequency below which terms will be ignored in the source doc. The default
            frequency is the {@link #DEFAULT_MIN_TERM_FREQ}.
            
            </summary>
            <returns> the frequency below which terms will be ignored in the source doc.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetMinTermFreq(System.Int32)">
            <summary> Sets the frequency below which terms will be ignored in the source doc.
            
            </summary>
            <param name="minTermFreq">the frequency below which terms will be ignored in the source doc.
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetMinDocFreq">
            <summary> Returns the frequency at which words will be ignored which do not occur in at least this
            many docs. The default frequency is {@link #DEFALT_MIN_DOC_FREQ}.
            
            </summary>
            <returns> the frequency at which words will be ignored which do not occur in at least this
            many docs.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetMinDocFreq(System.Int32)">
            <summary> Sets the frequency at which words will be ignored which do not occur in at least this
            many docs.
            
            </summary>
            <param name="minDocFreq">the frequency at which words will be ignored which do not occur in at
            least this many docs.
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.IsBoost">
            <summary> Returns whether to boost terms in query based on "score" or not. The default is
            {@link #DEFAULT_BOOST}.
            
            </summary>
            <returns> whether to boost terms in query based on "score" or not.
            </returns>
            <seealso cref="!:#SetBoost">
            </seealso>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetBoost(System.Boolean)">
            <summary> Sets whether to boost terms in query based on "score" or not.
            
            </summary>
            <param name="boost">true to boost terms in query based on "score", false otherwise.
            </param>
            <seealso cref="!:#isBoost">
            </seealso>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetFieldNames">
            <summary> Returns the field names that will be used when generating the 'More Like This' query.
            The default field names that will be used is {@link #DEFAULT_FIELD_NAMES}.
            
            </summary>
            <returns> the field names that will be used when generating the 'More Like This' query.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetFieldNames(System.String[])">
            <summary> Sets the field names that will be used when generating the 'More Like This' query.
            Set this to null for the field names to be determined at runtime from the IndexReader
            provided in the constructor.
            
            </summary>
            <param name="fieldNames">the field names that will be used when generating the 'More Like This'
            query.
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetMinWordLen">
            <summary> Returns the minimum word length below which words will be ignored. Set this to 0 for no
            minimum word length. The default is {@link #DEFAULT_MIN_WORD_LENGTH}.
            
            </summary>
            <returns> the minimum word length below which words will be ignored.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetMinWordLen(System.Int32)">
            <summary> Sets the minimum word length below which words will be ignored.
            
            </summary>
            <param name="minWordLen">the minimum word length below which words will be ignored.
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetMaxWordLen">
            <summary> Returns the maximum word length above which words will be ignored. Set this to 0 for no
            maximum word length. The default is {@link #DEFAULT_MAX_WORD_LENGTH}.
            
            </summary>
            <returns> the maximum word length above which words will be ignored.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetMaxWordLen(System.Int32)">
            <summary> Sets the maximum word length above which words will be ignored.
            
            </summary>
            <param name="maxWordLen">the maximum word length above which words will be ignored.
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetStopWords(System.Collections.Hashtable)">
            <summary> Set the set of stopwords.
            Any word in this set is considered "uninteresting" and ignored.
            Even if your Analyzer allows stopwords, you might want to tell the MoreLikeThis code to ignore them, as
            for the purposes of document similarity it seems reasonable to assume that "a stop word is never interesting".
            
            </summary>
            <param name="stopWords">set of stopwords, if null it means to allow stop words
            
            </param>
            <seealso cref="!:StopFilter.makeStopSet()">
            </seealso>
            <seealso cref="!:#getStopWords">
            </seealso>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetStopWords">
            <summary> Get the current stop words being used.</summary>
            <seealso cref="!:#setStopWords">
            </seealso>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetMaxQueryTerms">
            <summary> Returns the maximum number of query terms that will be included in any generated query.
            The default is {@link #DEFAULT_MAX_QUERY_TERMS}.
            
            </summary>
            <returns> the maximum number of query terms that will be included in any generated query.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetMaxQueryTerms(System.Int32)">
            <summary> Sets the maximum number of query terms that will be included in any generated query.
            
            </summary>
            <param name="maxQueryTerms">the maximum number of query terms that will be included in any
            generated query.
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.GetMaxNumTokensParsed">
            <returns> The maximum number of tokens to parse in each example doc field that is not stored with TermVector support
            </returns>
            <seealso cref="!:#DEFAULT_MAX_NUM_TOKENS_PARSED">
            </seealso>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.SetMaxNumTokensParsed(System.Int32)">
            <param name="i">The maximum number of tokens to parse in each example doc field that is not stored with TermVector support
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.Int32)">
            <summary> Return a query that will return docs like the passed lucene document ID.
            
            </summary>
            <param name="docNum">the documentID of the lucene doc to generate the 'More Like This" query for.
            </param>
            <returns> a query that will return docs like the passed lucene document ID.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.IO.FileInfo)">
            <summary> Return a query that will return docs like the passed file.
            
            </summary>
            <returns> a query that will return docs like the passed file.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.Uri)">
            <summary> Return a query that will return docs like the passed URL.
            
            </summary>
            <returns> a query that will return docs like the passed URL.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.IO.Stream)">
            <summary> Return a query that will return docs like the passed stream.
            
            </summary>
            <returns> a query that will return docs like the passed stream.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Like(System.IO.TextReader)">
            <summary> Return a query that will return docs like the passed Reader.
            
            </summary>
            <returns> a query that will return docs like the passed Reader.
            </returns>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.CreateQuery(Lucene.Net.Util.PriorityQueue{System.Object[]})">
            <summary> Create the More like query from a PriorityQueue</summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.CreateQueue(System.Collections.Generic.IDictionary{System.String,Lucene.Net.Search.Similar.MoreLikeThis.Int})">
            <summary> Create a PriorityQueue from a word->tf map.
            
            </summary>
            <param name="words">a map of words keyed on the word(String) with Int objects as the values.
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.DescribeParams">
            <summary> Describe the parameters that control how the "more like this" query is formed.</summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.Main(System.String[])">
            <summary> Test driver.
            Pass in "-i INDEX" and then either "-fn FILE" or "-url URL".
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveTerms(System.Int32)">
            <summary> Find words for a more-like-this query former.
            
            </summary>
            <param name="docNum">the id of the lucene document from which to find terms
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.AddTermFrequencies(System.Collections.Generic.IDictionary{System.String,Lucene.Net.Search.Similar.MoreLikeThis.Int},Lucene.Net.Index.TermFreqVector)">
            <summary> Adds terms and frequencies found in vector into the Map termFreqMap</summary>
            <param name="termFreqMap">a Map of terms and their frequencies
            </param>
            <param name="vector">List of terms and their frequencies for a doc/field
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.AddTermFrequencies(System.IO.TextReader,System.Collections.Generic.IDictionary{System.String,Lucene.Net.Search.Similar.MoreLikeThis.Int},System.String)">
            <summary> Adds term frequencies found by tokenizing text from reader into the Map words</summary>
            <param name="r">a source of text to be tokenized
            </param>
            <param name="termFreqMap">a Map of terms and their frequencies
            </param>
            <param name="fieldName">Used by analyzer for any special per-field analysis
            </param>
        </member>
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.IsNoiseWord(System.String)">
            <summary>determines if the passed term is likely to be of interest in "more like" comparisons 
            
            </summary>
            <param name="term">The word being considered
            </param>
            <returns> true if should be ignored, false if should be used in further analysis
            </returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveTerms(System.IO.TextReader)" -->
        <member name="M:Lucene.Net.Search.Similar.MoreLikeThis.RetrieveInterestingTerms(System.IO.TextReader)">
            <summary> Convenience routine to make it easy to return the most interesting words in a document.
            More advanced users will call {@link #RetrieveTerms(java.io.Reader) retrieveTerms()} directly.
            </summary>
            <param name="r">the source document
            </param>
            <returns> the most interesting words in the document
            
            </returns>
            <seealso cref="!:#RetrieveTerms(java.io.Reader)">
            </seealso>
            <seealso cref="!:#setMaxQueryTerms">
            </seealso>
        </member>
        <member name="T:Lucene.Net.Search.Similar.MoreLikeThis.FreqQ">
            <summary> PriorityQueue that orders words by score.</summary>
        </member>
        <member name="T:Lucene.Net.Search.Similar.MoreLikeThis.Int">
            <summary> Use for frequencies and to avoid renewing Integers.</summary>
        </member>
        <member name="T:Lucene.Net.Search.FuzzyLikeThisQuery">
            <summary>
            Fuzzifies ALL terms provided as strings and then picks the best n differentiating terms.
            In effect this mixes the behaviour of FuzzyQuery and MoreLikeThis but with special consideration
            of fuzzy scoring factors.
            This generally produces good results for queries where users may provide details in a number of 
            fields and have no knowledge of boolean query syntax and also want a degree of fuzzy matching and
            a fast query.
            
            For each source term the fuzzy variants are held in a BooleanQuery with no coord factor (because
            we are not looking for matches on multiple variants in any one doc). Additionally, a specialized
            TermQuery is used for variants and does not use that variant term's IDF because this would favour rarer 
            terms eg misspellings. Instead, all variants use the same IDF ranking (the one for the source query 
            term) and this is factored into the variant's boost. If the source query term does not exist in the
            index the average IDF of the variants is used.
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.FuzzyLikeThisQuery.#ctor(System.Int32,Lucene.Net.Analysis.Analyzer)">
            
            @param maxNumTerms The total number of terms clauses that will appear once rewritten as a BooleanQuery
            @param analyzer
        </member>
        <member name="M:Lucene.Net.Search.FuzzyLikeThisQuery.AddTerms(System.String,System.String,System.Single,System.Int32)">
            Adds user input for "fuzzification" 
            @param queryString The string which will be parsed by the analyzer and for which fuzzy variants will be parsed
            @param fieldName
            @param minSimilarity The minimum similarity of the term variants (see FuzzyTermEnum)
            @param prefixLength Length of required common prefix on variant terms (see FuzzyTermEnum)
        </member>
        <member name="T:Similarity.Net.SimilarityQueries">
            <summary> Simple similarity measures.
            
            
            </summary>
            <seealso cref="!:MoreLikeThis">
            </seealso>
        </member>
        <member name="M:Similarity.Net.SimilarityQueries.#ctor">
            <summary> </summary>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Similarity.Net.SimilarityQueries.FormSimilarQuery(System.String,Lucene.Net.Analysis.Analyzer,System.String,System.Collections.Hashtable)" -->
        <member name="T:Lucene.Net.Search.TermsFilter">
            <summary>
            A filter that contains multiple terms.
            </summary>
        </member>
        <member name="F:Lucene.Net.Search.TermsFilter.terms">
            <summary>
            The set of terms for this filter.
            </summary>
        </member>
        <member name="M:Lucene.Net.Search.TermsFilter.AddTerm(Lucene.Net.Index.Term)">
            <summary>
            Add a term to the set.
            </summary>
            <param name="term">The term to add.</param>
        </member>
        <member name="M:Lucene.Net.Search.TermsFilter.GetDocIdSet(Lucene.Net.Index.IndexReader)">
            <summary>
            Get the DocIdSet.
            </summary>
            <param name="reader">Applcible reader.</param>
            <returns>The set.</returns>
        </member>
    </members>
</doc>
